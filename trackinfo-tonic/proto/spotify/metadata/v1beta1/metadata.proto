syntax = "proto2";
// Definition of metadata protobuf messages.
//
// A general principal in how we've chosen to format these messages is that it
// should be possible to request small things without requesting the things
// that contain them, but the inverse is not necessarily true. So, for example,
// if I want track metadata, I should get everything I need when I request that
// track, including artist and album names. But if I request an album, I won't
// get all the data about the tracks on that album. I will get just the IDs of
// those tracks, which I'll have to request separately.
//
// Also, in many cases messages will embed other messages, but may not have all
// of the fields defined that comments say are mandatory. For example, Track
// objects in a Disc will contain only gids. The decision was made to do this
// rather than have something like "repeated bytes track_gid" so that we can
// more easily add additional data in the future, if needed.

package spotify.metadata;

option optimize_for = SPEED;

option java_package         = "com.spotify.metadata.proto";
option java_outer_classname = "Metadata";

message Entity {
    oneof entity {
        Artist artist = 1;
        Album album = 2;
        Track track = 3;
        Show show = 4;
        Episode episode = 5;
    }
}

message LocalizedString {
    optional string language = 1;
    optional string value = 2;
}

message Artist {
    // [mandatory]
    optional bytes           gid                     =  1; // 16 bytes
    // [mandatory]
    optional string          name                    =  2;
    optional sint32          popularity              =  3; // 0-100
    repeated TopTracks       top_track               =  4;
    repeated AlbumGroup      album_group             =  5;
    repeated AlbumGroup      single_group            =  6;
    repeated AlbumGroup      compilation_group       =  7;
    repeated AlbumGroup      appears_on_group        =  8;
    repeated string          genre                   =  9;
    repeated ExternalId      external_id             = 10;
    repeated Image           portrait                = 11; // Deprecated, use portrait_group instead
    repeated Biography       biography               = 12;
    repeated ActivityPeriod  activity_period         = 13;
    repeated Restriction     restriction             = 14;
    repeated Artist          related                 = 15; // Only artist.gid will be set
    optional bool            is_portrait_album_cover = 16;
    optional ImageGroup      portrait_group          = 17;
    repeated SalePeriod      sale_period             = 18;
    repeated LocalizedString localized_name          = 19;
    repeated Availability    availability            = 20;
}

message Album {
    enum Type {
        ALBUM       = 1;
        SINGLE      = 2;
        COMPILATION = 3;
        EP          = 4;
        AUDIOBOOK   = 5;
        PODCAST     = 6;
    }

    // [mandatory]
    optional bytes        gid                     =  1; // 16 bytes
    // [mandatory]
    optional string       name                    =  2;
    // [mandatory]
    repeated Artist       artist                  =  3; // only artist.gid, artist.name will be set
    // [mandatory]
    optional Type         type                    =  4;
    optional string       label                   =  5;
    optional Date         date                    =  6;
    optional sint32       popularity              =  7; // 0-100
    repeated string       genre                   =  8;
    repeated Image        cover                   =  9; // Deprecated, use cover_group instead
    repeated ExternalId   external_id             = 10;
    repeated Disc         disc                    = 11;
    repeated string       review                  = 12;
    repeated Copyright    copyright               = 13;
    repeated Restriction  restriction             = 14;
    repeated Album        related                 = 15; // only album.gid will be set
    repeated SalePeriod   sale_period             = 16;
    optional ImageGroup   cover_group             = 17;
    optional string       original_title          = 18;
    optional string       version_title           = 19;
    optional string       type_str                = 20;
    repeated Block        visibility_block        = 21; // Hidden internal field, should not escape to metadata clients
    optional int64        earliest_live_timestamp = 22;
    repeated Availability availability            = 23;
    repeated Track        windowed_track          = 24; // Hidden internal field, should not escape to metadata clients
    optional Licensor     licensor                = 25;
    optional int64        version                 = 26; // Version in seconds since epoch. Hidden internal field, should not escape to metadata clients
    optional string       feed_gid                = 27; // Hidden internal field, should not escape to metadata clients
    optional string       delivery_id             = 28; // Hidden internal field, should not escape to metadata clients
    repeated LocalizedString localized_name       = 29;
}

message Track {
    // [mandatory]
    optional bytes       gid               =  1; // 16 bytes
    // [mandatory]
    optional string      name              =  2;
    // [mandatory]
    // only the following fields will be set:
    //   album.gid, album.name,
    //   album.artist.gid, album.artist.name
    // the following fields will be set if they are set in the album:
    //   album.label, album.date, album.genre
    optional Album       album             =  3;
    repeated Artist      artist            =  4; // only artist.gid, artist.name will be set
    // [mandatory]
    optional sint32      number            =  5;
    // [mandatory]
    optional sint32      disc_number       =  6;
    optional sint32      duration          =  7; // Milliseconds
    optional sint32      popularity        =  8; // 0-100
    optional bool        explicit          =  9;
    repeated ExternalId  external_id       = 10;
    repeated Restriction restriction       = 11;
    repeated AudioFile   file              = 12;
    repeated Track       alternative       = 13; // only track.gid will be set
    repeated SalePeriod  sale_period       = 14;
    repeated AudioFile   preview           = 15;
    repeated string      tags              = 16; // freeform, for experimental features, etc.
    optional int64       earliest_live_timestamp = 17;
    optional bool        has_lyrics        = 18;
    repeated Availability availability     = 19;
    repeated string      lyrics_country    = 20; // Hidden internal field, should not escape to metadata clients
    optional Licensor    licensor          = 21;
    repeated string      language_of_performance = 22; // BCP 47 language codes
    repeated LocalizedString localized_name = 23;
}

message Show {
    /// Minimal playable audio entity "collection" fields
    // These fields are intentionally using the same numbers as for Album, because old hardware
    // speakers would reinterpret_cast<>() them into Album.  This probably doesn't happen any more,
    // but to be safe we add any fields that are common to both Show and Album in the 1..63 block.
    enum MediaType {
        MIXED = 0;
        AUDIO = 1;
        VIDEO = 2;
    }
    enum ConsumptionOrder {
        // omitting 0 so that there is no default
        SEQUENTIAL = 1;
        EPISODIC = 2;
        RECENT = 3;
    }
    enum Passthrough {
        UNKNOWN = 0;
        NONE = 1;
        ALLOWED = 2; //aka: cat 2 passthrough; this can fallback to transcoded audio
        MANDATORY = 3; //aka: cat 3 passthrough; no fallback
    }
    // [mandatory]
    optional bytes gid                                      = 1; // 16 bytes
    // [mandatory]
    optional string name                                    = 2;
    repeated LocalizedString localized_name                 = 29;

    /// Show specific fields
    optional string description                             = 64;
    optional sint32 deprecated_popularity                   = 65 [deprecated = true];
    optional string publisher                               = 66;
    optional string language                                = 67; // in BCP 47 format
    optional bool explicit                                  = 68;
    optional ImageGroup cover_image                         = 69;
    repeated Episode episode                                = 70; // only episode.gid will be set
    repeated Copyright copyright                            = 71;
    repeated Restriction restriction                        = 72;
    repeated string keyword                                 = 73;
    optional MediaType media_type                           = 74;
    optional ConsumptionOrder consumption_order             = 75;
    optional bool interpret_restriction_using_geoip         = 76;
    repeated SalePeriod sale_period  = 77;
    repeated Availability availability                      = 78;
    optional string country_of_origin                       = 79;
    repeated Categories categories                          = 80;
    optional Passthrough passthrough                        = 81 [default = UNKNOWN];
}

message Episode {
    /// Minimal playable audio entity fields
    // These fields are intentionally using the same numbers as for Track, because old hardware
    // speakers would reinterpret_cast<>() them into Track.  This probably doesn't happen any more,
    // but to be safe we add any fields that are common to both Episode and Track in the 1..63 block.

    // [mandatory]
    optional bytes gid                                      = 1; // 16 bytes
    // [mandatory]
    optional string name                                    = 2;
    optional sint32 duration                                = 7; // milliseconds
    repeated AudioFile audio                                = 12;
    repeated LocalizedString localized_name                 = 23;

    /// Episode specific fields
    optional string description                             = 64;
    optional sint32 number                                  = 65; // semantic, starting from 1
    optional Date publish_time                              = 66;
    optional sint32 deprecated_popularity                   = 67 [deprecated = true]; // 0-100
    optional ImageGroup cover_image                         = 68;
    optional string language                                = 69; // in BCP 47 format
    optional bool explicit                                  = 70;

    optional Show show                                      = 71; // only show.gid, show.name will be set
    repeated VideoFile video                                = 72;
    repeated VideoFile video_preview                        = 73;

    repeated AudioFile audio_preview                        = 74;
    repeated Restriction restriction                        = 75;
    optional ImageGroup freeze_frame                        = 76;
    repeated string keyword                                 = 77;
    optional bool interpret_restriction_using_geoip         = 78;
    optional bool suppress_monetization                     = 79;
    repeated SalePeriod sale_period  = 80;
    optional bool allow_background_playback                 = 81;
    repeated Availability availability                      = 82;
    optional string external_url                            = 83;
}

message Licensor {
    // [mandatory]
    optional bytes uuid = 1;
}

// Maps country -> list of tracks. Tracks should be
// orderered by popularity with most popular first.
message TopTracks {
    // [mandatory]
    optional string country = 1; // ISO 3166-1 alpha-2 code
    repeated Track  track   = 2; // Only track.gid will be set
}

// If decade is set, none of the other fields will be set.
// At least one field must be set
message ActivityPeriod {
    optional sint32 start_year = 1;
    optional sint32 end_year   = 2;
    optional sint32 decade     = 3;
}

// In order to support grouping of similar albums (same tracks, etc., but
// available in different territories for instance) we need to add an extra
// level here.
message AlbumGroup {
    repeated Album album = 1; // only album.gid will be set
}

message Date {
    // [mandatory]
    optional sint32 year   = 1;
    optional sint32 month  = 2;
    optional sint32 day    = 3;
    optional sint32 hour   = 4;
    optional sint32 minute = 5;
}

message Image {
    enum Size {
        DEFAULT = 0;
        SMALL   = 1;
        LARGE   = 2;
        XLARGE  = 3;
    }

    // [mandatory]
    optional bytes  file_id = 1; // 20 bytes
    // [mandatory]
    optional Size   size    = 2;
    optional sint32 width   = 3; // pixel width of the specific file - not the original
    optional sint32 height  = 4;
}

message ImageGroup {
    repeated Image image = 1;
}

message Biography {
    optional string           text            = 1;
    repeated Image            portrait        = 2; // Deprecated, use portrait_group instead
    repeated ImageGroup       portrait_group  = 3;
    repeated LocalizedString  localized_text  = 4;
}

message Disc {
    // [mandatory]
    optional sint32 number = 1;
    optional string name   = 2;
    repeated Track  track  = 3; // only track.gid will be set
}

message Copyright {
    enum Type {
        P = 0;
        C = 1;
    }

    // [mandatory]
    optional Type   type = 1;
    // [mandatory]
    optional string text = 2;
}

message Restriction {
    // Deprecated enum of catalogues. At some point we will stop adding new catalogues and just use
    // a string instead
    enum Catalogue {
        AD            = 0;
        SUBSCRIPTION  = 1;
        CATALOGUE_ALL = 2;
        SHUFFLE       = 3;
        COMMERCIAL    = 4;
    }

    enum Type {
        STREAMING = 0;
    }

    // Will not be set in the future, use the new metadata API's and the catalogue_str field instead.
    repeated Catalogue catalogue           = 1;

    oneof country_restriction {
        string countries_allowed   = 2; // Repeated ISO 3166-1 alpha-2 codes, e.g. "FINOSE"
        string countries_forbidden = 3; // Repeated ISO 3166-1 alpha-2 codes, e.g. "ATCHDE"
    }
    optional Type      type                = 4; // If not set, it is both STREAMING and DOWNLOAD
    // (DOWNLOAD only is not supported)

    // New way of communicating the catalogue. Will not be set at the same time as catalogue
    repeated string    catalogue_str       = 5;
}

// An indication of when a restricted entity is available.  All of the conditions of the
// availability need to hold, i.e. if "catalogue_str" and "start" is set, it means
// "The entity will be available in the specified catalogue(s) after the given date."
// To express "The entity is available in the specified catalogue" OR "The entity will be
// available after a certain date," two different Availability messages should be used.
// This means that a consumer of this message SHOULD check if there are any unknown
// fields and if so discard the Availability, since it contains conditions that might not
// hold for that consumer.
message Availability {
    // The entity is available in the specified catalogues, so if the user would switch to
    // one of these catalogues, the entity would most likely be available.
    repeated string catalogue_str = 1;
    // The entity is available after the specified date (inclusive).
    optional Date start = 2;
}

message Categories {
    optional string name                 = 1;
    repeated SubCategories subcategories = 2;
}

message SubCategories {
    optional string name = 1;
}

message SalePeriod {
    // [mandatory]
    repeated Restriction restriction = 1;

    // Missing start date indicates that the saleperiod was valid
    // since before the index was built
    optional Date        start       = 2;

    // Missing end date indicates that the saleperiod
    // will be valid at least until the next index
    optional Date        end         = 3;
}

message ExternalId {
    // [mandatory]
    optional string type = 1;
    // [mandatory]
    optional string id   = 2;
}

message AudioFile {
    enum Format {
        OGG_VORBIS_96  = 0;
        OGG_VORBIS_160 = 1;
        OGG_VORBIS_320 = 2;
        MP3_256        = 3;
        MP3_320        = 4;
        MP3_160        = 5; // Unencrypted, 1 substream
        MP3_96         = 6; // Unencrypted, 1 substream, for previews
        MP3_160_ENC    = 7; // Encrypted, 1 substream, rc4
        AAC_24         = 8; // Encrypted, 1 substream, aes
        AAC_48         = 9; // Encrypted, 1 substream, aes
        MP4_128        = 10; // AAC + EME, web audio
        MP4_256        = 11; // AAC + EME, web audio
        MP4_128_DUAL   = 12; // dual DRM
        MP4_256_DUAL   = 13; // dual DRM
    }

    // [mandatory]
    optional bytes  file_id = 1; // 20 bytes
    // [mandatory]
    optional Format format  = 2;
}

message VideoFile {
    // [mandatory]
    optional bytes file_id = 1; // 16 bytes
}

message Block {
    enum Type {
        TOTAL      = 0; // Complete block, every entity
        COVERARTCP = 1; // Block cover art and copyright lines
    }
    // Can be omitted, with the implication that the block is world wide.
    optional string countries = 1; // Repeated ISO 3166-1 alpha-2 codes, e.g. "FINOSE"
    // [mandatory]
    optional Type   type      = 2;
}